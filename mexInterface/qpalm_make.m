function qpalm_make (metis_path)
%QPALM_MAKE compiles the CHOLMOD mexFunctions
%
% Example:
%   qpalm_make
%
% QPALM relies on CHOLMOD and AMD and COLAMD, and optionally CCOLAMD, CAMD, and METIS.
% You must type the qpalm_make command while in the QPALM/mexInterface directory.

details = 0 ;	    % 1 if details of each command are to be printed

v = version ;
try
    % ispc does not appear in MATLAB 5.3
    pc = ispc ;
    mac = ismac ;
catch                                                                       %#ok
    % if ispc fails, assume we are on a Windows PC if it's not unix
    pc = ~isunix ;
    mac = 0 ;
end

flags = '' ;
is64 = ~isempty (strfind (computer, '64')) ;
if (is64)
    % 64-bit MATLAB
    flags = '-largeArrayDims' ;
end

% MATLAB 8.3.0 now has a -silent option to keep 'mex' from burbling too much
if (~verLessThan ('matlab', '8.3.0'))
    flags = ['-silent ' flags] ;
end

include = '-I. -I../include -I../SuiteSparse/AMD/Include -I../SuiteSparse/COLAMD/Include -I../SuiteSparse/CCOLAMD/Include -I../SuiteSparse/CAMD/Include -I../SuiteSparse/CHOLMOD/Include -I../SuiteSparse/CHOLMOD/MATLAB -I../SuiteSparse/SuiteSparse_config' ;

if (verLessThan ('matlab', '7.0'))
    % do not attempt to compile CHOLMOD with large file support
    include = [include ' -DNLARGEFILE'] ;
elseif (~pc)
    % Linux/Unix require these flags for large file support
    include = [include ' -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE'] ;
end

if (verLessThan ('matlab', '6.5'))
    % logical class does not exist in MATLAB 6.1 or earlie
    include = [include ' -DMATLAB6p1_OR_EARLIER'] ;
end

 % Determine if METIS is available
if (nargin < 1)
    metis_path = '../SuiteSparse/metis-5.1.0' ;
end
have_metis = exist (metis_path, 'dir') ;

if (have_metis)
    fprintf ('Compiling CHOLMOD with METIS 5.1.0 for MATLAB Version %s\n', v) ;
    include = [include ' -I' metis_path '/include'] ;
    include = [include ' -I' metis_path '/GKlib'] ;
    include = [include ' -I' metis_path '/libmetis'] ;
else
    fprintf ('Compiling CHOLMOD without METIS for MATLAB Version %s\n', v) ;
    include = ['-DNPARTITION ' include] ;
end

flags = [flags ' -DMATLAB_MEX_FILE -DNMALLOC'];

 %---------------------------------------------------------------------------
 % BLAS option
 %---------------------------------------------------------------------------

 % This is exceedingly ugly.  The MATLAB mex command needs to be told where to
 % fine the LAPACK and BLAS libraries, which is a real portability nightmare.

if (pc)
    if (verLessThan ('matlab', '7.5'))
        lapack = 'libmwlapack.lib' ;
    else
        lapack = 'libmwlapack.lib libmwblas.lib' ;
    end
else
    if (verLessThan ('matlab', '7.5'))
        lapack = '-lmwlapack' ;
    else
        lapack = '-lmwlapack -lmwblas' ;
    end
end

if (is64 && ~verLessThan ('matlab', '7.8'))
    % versions 7.8 and later on 64-bit platforms use a 64-bit BLAS
    fprintf ('with 64-bit BLAS\n') ;
    flags = [flags ' -DBLAS64'] ;
end

if (~(pc || mac))
    % for POSIX timing routine
    lapack = [lapack ' -lrt'] ;
end

 %-------------------------------------------------------------------------------

config_src = { '../SuiteSparse/SuiteSparse_config/SuiteSparse_config' } ;

ordering_src = { ...
    '../SuiteSparse/AMD/Source/amd_1', ...
    '../SuiteSparse/AMD/Source/amd_2', ...
    '../SuiteSparse/AMD/Source/amd_aat', ...
    '../SuiteSparse/AMD/Source/amd_control', ...
    '../SuiteSparse/AMD/Source/amd_defaults', ...
    '../SuiteSparse/AMD/Source/amd_dump', ...
    '../SuiteSparse/AMD/Source/amd_global', ...
    '../SuiteSparse/AMD/Source/amd_info', ...
    '../SuiteSparse/AMD/Source/amd_order', ...
    '../SuiteSparse/AMD/Source/amd_postorder', ...
    '../SuiteSparse/AMD/Source/amd_post_tree', ...
    '../SuiteSparse/AMD/Source/amd_preprocess', ...
    '../SuiteSparse/AMD/Source/amd_valid', ...
    '../SuiteSparse/CAMD/Source/camd_1', ...
    '../SuiteSparse/CAMD/Source/camd_2', ...
    '../SuiteSparse/CAMD/Source/camd_aat', ...
    '../SuiteSparse/CAMD/Source/camd_control', ...
    '../SuiteSparse/CAMD/Source/camd_defaults', ...
    '../SuiteSparse/CAMD/Source/camd_dump', ...
    '../SuiteSparse/CAMD/Source/camd_global', ...
    '../SuiteSparse/CAMD/Source/camd_info', ...
    '../SuiteSparse/CAMD/Source/camd_order', ...
    '../SuiteSparse/CAMD/Source/camd_postorder', ...
    '../SuiteSparse/CAMD/Source/camd_preprocess', ...
    '../SuiteSparse/CAMD/Source/camd_valid', ...
    '../SuiteSparse/COLAMD/Source/colamd', ...
    '../SuiteSparse/CCOLAMD/Source/ccolamd' } ;

if (have_metis)

    metis_src = {
        'GKlib/b64', ...
        'GKlib/blas', ...
        'GKlib/csr', ...
        'GKlib/error', ...
        'GKlib/evaluate', ...
        'GKlib/fkvkselect', ...
        'GKlib/fs', ...
        'GKlib/getopt', ...
        'GKlib/gkregex', ...
        'GKlib/graph', ...
        'GKlib/htable', ...
        'GKlib/io', ...
        'GKlib/itemsets', ...
        'GKlib/mcore', ...
        'GKlib/memory', ...
        'GKlib/omp', ...
        'GKlib/pdb', ...
        'GKlib/pqueue', ...
        'GKlib/random', ...
        'GKlib/rw', ...
        'GKlib/seq', ...
        'GKlib/sort', ...
        'GKlib/string', ...
        'GKlib/timers', ...
        'GKlib/tokenizer', ...
        'GKlib/util', ...
        'libmetis/auxapi', ...
        'libmetis/balance', ...
        'libmetis/bucketsort', ...
        'libmetis/checkgraph', ...
        'libmetis/coarsen', ...
        'libmetis/compress', ...
        'libmetis/contig', ...
        'libmetis/debug', ...
        'libmetis/fm', ...
        'libmetis/fortran', ...
        'libmetis/frename', ...
        'libmetis/gklib', ...
        'libmetis/graph', ...
        'libmetis/initpart', ...
        'libmetis/kmetis', ...
        'libmetis/kwayfm', ...
        'libmetis/kwayrefine', ...
        'libmetis/mcutil', ...
        'libmetis/mesh', ...
        'libmetis/meshpart', ...
        'libmetis/minconn', ...
        'libmetis/mincover', ...
        'libmetis/mmd', ...
        'libmetis/ometis', ...
        'libmetis/options', ...
        'libmetis/parmetis', ...
        'libmetis/pmetis', ...
        'libmetis/refine', ...
        'libmetis/separator', ...
        'libmetis/sfm', ...
        'libmetis/srefine', ...
        'libmetis/stat', ...
        'libmetis/timing', ...
        'libmetis/util', ...
        'libmetis/wspace', ...
    } ;

    for i = 1:length (metis_src)
        metis_src {i} = [metis_path '/' metis_src{i}] ;
    end
end

cholmod_matlab = { '../SuiteSparse/CHOLMOD/MATLAB/cholmod_matlab' } ;

cholmod_src = {
    '../SuiteSparse/CHOLMOD/Core/cholmod_aat', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_add', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_band', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_change_factor', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_common', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_complex', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_copy', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_dense', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_error', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_factor', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_memory', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_sparse', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_transpose', ...
    '../SuiteSparse/CHOLMOD/Core/cholmod_triplet', ...
    '../SuiteSparse/CHOLMOD/Check/cholmod_check', ...
    '../SuiteSparse/CHOLMOD/Check/cholmod_read', ...
    '../SuiteSparse/CHOLMOD/Check/cholmod_write', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_amd', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_analyze', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_colamd', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_etree', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_factorize', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_postorder', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_rcond', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_resymbol', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_rowcolcounts', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_rowfac', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_solve', ...
    '../SuiteSparse/CHOLMOD/Cholesky/cholmod_spsolve', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_drop', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_horzcat', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_norm', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_scale', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_sdmult', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_ssmult', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_submatrix', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_vertcat', ...
    '../SuiteSparse/CHOLMOD/MatrixOps/cholmod_symmetry', ...
    '../SuiteSparse/CHOLMOD/Modify/cholmod_rowadd', ...
    '../SuiteSparse/CHOLMOD/Modify/cholmod_rowdel', ...
    '../SuiteSparse/CHOLMOD/Modify/cholmod_updown', ...
    '../SuiteSparse/CHOLMOD/Supernodal/cholmod_super_numeric', ...
    '../SuiteSparse/CHOLMOD/Supernodal/cholmod_super_solve', ...
    '../SuiteSparse/CHOLMOD/Supernodal/cholmod_super_symbolic', ...
    '../SuiteSparse/CHOLMOD/Partition/cholmod_ccolamd', ...
    '../SuiteSparse/CHOLMOD/Partition/cholmod_csymamd', ...
    '../SuiteSparse/CHOLMOD/Partition/cholmod_camd', ...
    '../SuiteSparse/CHOLMOD/Partition/cholmod_metis', ...
    '../SuiteSparse/CHOLMOD/Partition/cholmod_nesdis' } ;

qpalm_src = { ...
    'qpalm',...
    'cholmod_interface',...
    'cs',...
    'lbfgs',...
    'lin_alg',...
    'linesearch',...
    'newton',...
    'scaling',...
    'termination',...
    'util',...
    'validate',...
    };
    
qpalm_src_path = '../src';
for i = 1:length (qpalm_src)
    qpalm_src {i} = [qpalm_src_path '/' qpalm_src{i}] ;
end
cholmod_mex_src = { ...
    '../SuiteSparse/CHOLMOD/MATLAB/analyze', ...
    '../SuiteSparse/CHOLMOD/MATLAB/bisect', ...
    '../SuiteSparse/CHOLMOD/MATLAB/chol2', ...
    '../SuiteSparse/CHOLMOD/MATLAB/cholmod2', ...
    '../SuiteSparse/CHOLMOD/MATLAB/etree2', ...
    '../SuiteSparse/CHOLMOD/MATLAB/lchol', ...
    '../SuiteSparse/CHOLMOD/MATLAB/ldlchol', ...
    '../SuiteSparse/CHOLMOD/MATLAB/ldlsolve', ...
    '../SuiteSparse/CHOLMOD/MATLAB/ldlupdate', ...
    '../SuiteSparse/CHOLMOD/MATLAB/ldlrowmod', ...
    '../SuiteSparse/CHOLMOD/MATLAB/metis', ...
    '../SuiteSparse/CHOLMOD/MATLAB/spsym', ...
    '../SuiteSparse/CHOLMOD/MATLAB/nesdis', ...
    '../SuiteSparse/CHOLMOD/MATLAB/septree', ...
    '../SuiteSparse/CHOLMOD/MATLAB/resymbol', ...
    '../SuiteSparse/CHOLMOD/MATLAB/sdmult', ...
    '../SuiteSparse/CHOLMOD/MATLAB/sparse2', ...
    '../SuiteSparse/CHOLMOD/MATLAB/symbfact2', ...
    '../SuiteSparse/CHOLMOD/MATLAB/mread', ...
    '../SuiteSparse/CHOLMOD/MATLAB/mwrite', ...
    '../SuiteSparse/CHOLMOD/MATLAB/lxbpattern', '../SuiteSparse/CHOLMOD/MATLAB/lsubsolve' } ;   % <=== these 2 are just for testing

if (pc)
    % Windows does not have drand48 and srand48, required by METIS.  Use
    % drand48 and srand48 in CHOLMOD/MATLAB/Windows/rand48.c instead.
    % Also provide Windows with an empty <strings.h> include file.
    obj_extension = '.obj' ;
    cholmod_matlab = [cholmod_matlab {'Windows/rand48'}] ;
    include = [include ' -IWindows'] ;
else
    obj_extension = '.o' ;
end

 % compile each library source file
obj = '' ;

source = [ordering_src config_src cholmod_src cholmod_matlab qpalm_src] ;
if (have_metis)
    source = [metis_src source] ;
end

kk = 0 ;
cflags = 'CFLAGS="\$CFLAGS -std=c99 -fbounds-check -Wall -Wextra -fPIC -DMATLAB -O3 -DPROFILING -DPRINTING"';
flags = [cflags ' ' flags];

for f = source
    ff = f {1} ;
    if (isequal (ff, [metis_path '/GKlib/util']))
        % special case, since a file with the same name also exists in libmetis
        copyfile ([ff '.c'], 'GKlib_util.c', 'f') ;
        ff = 'GKlib_util' ;
        o = 'GKlib_util' ;
    elseif (isequal (ff, [metis_path '/GKlib/graph']))
        % special case, since a file with the same name also exist in libmetis
        copyfile ([ff '.c'], 'GKlib_graph.c', 'f') ;
        ff = 'GKlib_graph' ;
        o = 'GKlib_graph' ;
    elseif (isequal (ff, [qpalm_src_path '/util']))
        % special case, since a file with the same name also exists in
        % qpalm
        copyfile ([ff '.c'], 'qpalm_util.c', 'f') ;
        ff = 'qpalm_util' ;
        o = 'qpalm_util' ;
    else
        slash = strfind (ff, '/') ;
        if (isempty (slash))
            slash = 1 ;
        else
            slash = slash (end) + 1 ;
        end
        o = ff (slash:end) ;
    end
    % fprintf ('%s\n', o) ;
    o = [o obj_extension] ;
    obj = [obj  ' ' o] ;					            %#ok
    s = sprintf ('mex %s -DDLONG -O %s -c %s.c', flags, include, ff) ;
    kk = do_cmd (s, kk, details) ;
end

%  % compile each mexFunction
% for f = cholmod_mex_src
%     s = sprintf ('mex %s -DDLONG -O %s %s.c', flags, include, f{1}) ;
%     s = [s obj ' ' lapack] ;						    %#ok
%     kk = do_cmd (s, kk, details) ;
% end
% cflags = '';

% qpalm_mex_src = {'qpalm_mex'};
s = sprintf ('mex %s -DDLONG -O %s %s.c', flags, include, 'qpalm_mex') ;
s = [s obj ' ' lapack] ;	
kk = do_cmd (s, kk, details) ;

 % clean up
s = ['delete ' obj] ;
do_cmd (s, kk, details) ;
fprintf ('\nQPALM successfully compiled\n') ;

% remove the renamed METIS files, if they exist
if (exist ('GKlib_util.c', 'file'))
    delete ('GKlib_util.c') ;
end
if (exist ('GKlib_graph.c', 'file'))
    delete ('GKlib_graph.c') ;
end
if (exist ('qpalm_util.c', 'file'))
    delete ('qpalm_util.c') ;
end

 %------------------------------------------------------------------------------
function kk = do_cmd (s, kk, details)
 %DO_CMD: evaluate a command, and either print it or print a "."
if (details)
    fprintf ('%s\n', s) ;
else
    if (mod (kk, 60) == 0)
	fprintf ('\n') ;
    end
    kk = kk + 1 ;
    fprintf ('.') ;
end
eval (s) ;
