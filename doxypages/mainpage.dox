/*! \mainpage QPALM: Proximal Augmented Lagrangian Solver for (Nonconvex) Quadratic Programs
 *
 * \section intro_sec Introduction
 *
 * This is a C implementation of QPALM, a proximal augmented Lagrangian based solver for (possibly nonconvex) quadratic programs.
 * QPALM solves problems of the form:
 * @f{align*}{ 
 * \mbox{\Large\( 
     \textrm{minimize \hspace{1cm}} \)} & \mbox{\Large\( \frac{1}{2}x^T Q x + q^T x \)} \\
 * \mbox{\Large\( \textrm{subject to \hspace{1cm}} \)} & \mbox{\Large\(  b_\textrm{min} \leq Ax \leq b_\textrm{max} 
 * \)}
 * @f}
 * 
 * \section install_sec Installation
 * 
 * First of all, clone the repo with all the submodules! For this, run
 * 
 * \code{.sh}
 * git clone https://github.com/Benny44/QPALM.git
 * git submodule update --init --recursive
 * \endcode
 * 
 * \subsection matlab Matlab
 * To install the mex interface of QPALM, add QPALM and its subfolders to the matlab path. Then run qpalm_make.m. You can test whether QPALM is working using the examples/qpalm_mex_demo.m and examples/qpalm_mex_nonconvex_demo.m.
 * 
 * \subsection c C
 * To install a C-callable library, check [Bintray](https://bintray.com/benny44/generic/QPALM) for the binaries. These were compiled against [lapack](https://anaconda.org/conda-forge/lapack) and [lapacke](https://anaconda.org/conda-forge/liblapacke) from conda. So install miniconda and run the following commands
 * \code{.sh}
 * conda install -c conda-forge lapack
 * conda install -c conda-forge/label/cf202003 liblapacke
 * export LD_LIBRARY_PATH=path-to-miniconda/lib/:$LD_LIBRARY_PATH
 * export LD_LIBRARY_PATH=path-to-qpalm-binaries/lib/:$LD_LIBRARY_PATH
 * \endcode
 * 
 * \subsection python Python
 * The python interface unfortunately only works on Linux, not on MacOS. It has been compiled for python version 3.7. If you want to use a different version, do your own install with the instructions on custom compilation below.
 * After following the instructions for installing the C-library above (or a custom compilation below), do
 * \code{.sh}
 * export LD_LIBRARY_PATH=path-to-qpalm-binaries/interfaces/python/build/lib/:$LD_LIBRARY_PATH
 * python3 path-to-qpalm-binaries/interfaces/python/qpalm_python_demo.py
 * \endcode
 * 
 * \subsection Julia
 * Clone [QPALM.jl](https://github.com/kul-forbes/QPALM.jl/tree/856c70d2be99a24e5d9a6391be45cf40c48947d4).
 * Follow the instructions on the C library above. In addition, copy the lib folder obtained from bintray to path-to-QPALM.jl/deps, and do
 * \code{.sh}
 * export LD_LIBRARY_PATH=path-to-QPALM.jl/deps/lib/:$LD_LIBRARY_PATH
 * \endcode
 * Then from the Julia (>= 1.0) REPL, do
 * \code{.jl}
 * ] dev path-to-QPALM.jl
 * include("test/runtests.jl")
 * \endcode
 * 
 * \subsection custom Custom compilation
 * If you wish to do a custom compilation of the shared libraries, take a look at buildCustom.sh. First install the dependencies
 * \code{.sh}
 * conda install -c conda-forge lapack
 * conda install -c conda-forge/label/cf202003 liblapacke
 * \endcode
 * Then change the following lines near the top of the script
 * \code{.sh}
 * export MINICONDA_LIB=path-to-miniconda/lib
 * export MINICONDA_INCLUDE=path-to-miniconda/include
 * \endcode
 * Furthermore, change the cmake line to have whatever flags you want. To build the release version (with tests), use for example
 * \code{.sh}
 * cmake $curdir -DCMAKE_BUILD_TYPE=release -DCOVERAGE=ON
 * \endcode
 * To build the python interface, use instead
 * \code{.sh}
 * cmake path-to-QPALM -DCMAKE_BUILD_TYPE=release -DINTERFACES=OFF -DUNITTESTS=OFF -DPYTHON=ON
 * \endcode
 * Finally, run the buildCustom.sh script
 * \code{.sh}
 * chmod 755 buildCustom.sh
 * ./buildCustom.sh
 * \endcode
 * 
 * \section examples Code examples
 * \li For the mex interface of QPALM, check out examples/qpalm_mex_demo.m and examples/qpalm_mex_nonconvex_demo.m.
 * \li For the C-version of QPALM, check out examples/qpalm_demo.c.
 * \li For the python interface of QPALM, check out interfaces/python/qpalm_python_demo.py.
 * \li For the Julia interface of QPALM, check out any of the files in interfaces/QPALM.jl/test/.
 *   
 * \section cite Citing QPALM
 * 
 * If you use QPALM in your research, please cite the following paper
 * \code{.unparsed}
 * @inproceedings{hermans2019qpalm,
 * author       = {Hermans, B. and Themelis, A. and Patrinos, P.},
 * booktitle    = {58th IEEE Conference on Decision and Control},
 * title        = {{QPALM}: {A} {N}ewton-type {P}roximal {A}ugmented {L}agrangian {M}ethod for {Q}uadratic {P}rograms},
 * year         = {2019},
 * volume       = {},
 * number       = {},
 * pages        = {},
 * doi          = {},
 * issn         = {},
 * month        = {Dec.},
 * }
 * \endcode
 * 
 * \section license License
 * 
 * GPL 3.0
 */