/*! \mainpage QPALM: Proximal Augmented Lagrangian Solver for (Nonconvex) Quadratic Programs
 *
 * \section intro_sec Introduction
 *
 * This is a C implementation of QPALM, a proximal augmented Lagrangian based solver for (possibly nonconvex) quadratic programs.
 * QPALM solves problems of the form:
 * @f{align*}{ 
 * \mbox{\Large\( 
     \textrm{minimize \hspace{1cm}} \)} & \mbox{\Large\( \frac{1}{2}x^T Q x + q^T x \)} \\
 * \mbox{\Large\( \textrm{subject to \hspace{1cm}} \)} & \mbox{\Large\(  b_\textrm{min} \leq Ax \leq b_\textrm{max} 
 * \)}
 * @f}
 * 
 * \section install_sec Installation
 * \subsection c Compiling the C library
 * Binaries for Linux and MacOS can be obtained from <a href="https://bintray.com/benny44/generic/QPALM/1.0">bintray</a>. 
 * These were compiled against suitesparse and lapack from conda, see https://anaconda.org/conda-forge/suitesparse and https://anaconda.org/conda-forge/lapack. 
 * 
 * \subsection mex Compiling the Mex interface
 * Add QPALM/mexInterface to your Matlab path and run \c qpalm_make.m. With this command, you compile the cholmod and qpalm source files, and finally the qpalm Mex 
 * interface. This might take a little bit of time (less than one minute).
 * 
 * \subsection julia Julia interface
 * 
 * See https://github.com/kul-forbes/QPALM.jl
 * 
 * \section example Using QPALM
 * 
 * Using QPALM from Matlab is extremely simple. Here is an example
 * \code{.unparsed}
 * %% Generate data
 * m = 300;n = 50;
 * A = sprandn(m, n, 1e-1, 1e-4); 
 * lb = -2*ones(m,1);
 * ub =  2*ones(m,1);
 * Q = sprandsym(n, 1e-1, 1e-4, 1);
 * q = 10*randn(n,1);
 * 
 * %% Solve with qpalm
 * solver = qpalm;
 * settings = solver.default_settings();
 * % Optionally set some settings
 * settings.max_iter = 1000;
 * settings.eps_abs = 1e-4;
 * settings.eps_rel = 1e-4;
 * 
 * solver.setup(Q, q, A, lb, ub, settings);
 * 
 * res = solver.solve();
 * 
 * % The solver is started by default from x = y = 0. The user can specify
 * % warm start variables by running    
 * %
 * % solver.setup(Q, q, A, lb, ub, x, y, settings);
 * %
 * % or on the fly anywhere after the setup command by using
 * %
 * % solver.warm_start(x, y);
 * \endcode
 * 
 * \section cite Citing QPALM
 * 
 * If you use QPALM in your research, please cite the following paper
 * \code{.unparsed}
 * @inproceedings{hermans2019qpalm,
 * author		= {Hermans, B. and Themelis, A. and Patrinos, P.},
 * booktitle	= {58th IEEE Conference on Decision and Control},
 * title		= {{QPALM}: {A} {N}ewton-type {P}roximal {A}ugmented {L}agrangian {M}ethod for {Q}uadratic {P}rograms},
 * year		    = {2019},
 * volume		= {},
 * number		= {},
 * pages		= {},
 * doi			= {},
 * issn		    = {},
 * month		= {Dec.},
 * }
 * \endcode
 * 
 * \section license License
 * 
 * GPL 3.0
 */